#!/usr/bin/env php
<?php

// Initialization

ini_set('display_errors', true);
error_reporting(E_ALL);

/**
 * Converts $count to seconds, according to $unit.
 * 
 * @param int    $count
 * @param string $unit 
 * 
 * @return int
 */
function convert_to_seconds($count, $unit)
{
    if ($unit === 's') {
        return intval($count);
    } elseif ($unit === 'm') {
        return intval($count) * 60;
    } elseif ($unit === 'h') {
        return intval($count) * 3600;
    } else {
        exit("Incorrect time unit specified for convert_to_seconds().\n");
    }
}

// Extract and check target path

if (!empty($argv[1])) {
    $path = strval($argv[1]);
    if (!file_exists($path)) {
        exit("The path specified as an argument is not valid.\n");
    }
} else {
    exit("Missing argument: you need to specify the path to the file containing the text to transform.\n");
}

// Target file parsing and transforming (output to STDOUT)

$file = fopen($path, 'r');

echo "<ul>\n";

while(($line = fgets($file)) !== false) {
    if (!$line) {
        continue;
    }

    $line = str_replace(array("\r\n", "\r", "\n"), '', $line);

    //$splitted_line = preg_split('/^((?:\:?\d{2}){3})(?:\ {2,}|\t+)/', $line, -1, (PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE));
    $splitted_line = preg_match('#^((?:\:?\d+){3})\s+(.+)$#', $line, $matches);

    if (!$splitted_line) {
        exit("Invalid format.\n");
    }

    $timecode = $matches[1];
    $label    = $matches[2];

    $splitted_timecode = explode(':', $timecode);

    $position_in_seconds = convert_to_seconds($splitted_timecode[0], 'h') +
                           convert_to_seconds($splitted_timecode[1], 'm') +
                           convert_to_seconds($splitted_timecode[2], 's');

    echo sprintf('<li><a href="?position=%s" rel="nofollow">%s</a></li>'."\n", $position_in_seconds, $label);
}

echo "</ul>\n";

// Closure

fclose($file);
