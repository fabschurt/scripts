#!/usr/bin/env php
<?php

/**
 * This file is part of the fabschurt/scripts package.
 *
 * (c) 2015 Fabien Schurter <dev@fabschurt.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author  Fabien Schurter <dev@fabschurt.net>
 * @license MIT
 */

// Default option values
$target_path = null;
$do_it       = false;

/**
 * Displays the script's usage.
 */
function display_usage()
{
    echo "Usage: create-gitkeeps [--go] <path>\n";
}

/**
 * Scans `$current_dir` and its subdirs, and creates `.gitkeep` files in empty
 * dirs.
 *
 * @param string $current_dir
 */
function scan_dirs($current_dir)
{
    if (!is_dir($current_dir) || !is_readable($current_dir)) {
        return;
    }

    global $do_it;
    $subdir_paths = array_diff(scandir($current_dir), array('.', '..'));

    // Create a .gitkeep file in the current directory if it is empty…
    if (!count($subdir_paths) && is_writable($current_dir)) {
        $current_gitkeep_path = "{$current_dir}/.gitkeep";
        if (!$do_it) {
            echo "To be touched: {$current_gitkeep_path}\n";
        } elseif (touch($current_gitkeep_path)) {
            echo "Touched: {$current_gitkeep_path}\n";
        } else {
            echo "Error: {$current_gitkeep_path}\n";
        }
    // …and if not, traverse through its children
    } else {
        foreach ($subdir_paths as $subdir_path) {
            $subdir_path = "{$current_dir}/{$subdir_path}";
            if (is_dir($subdir_path) && is_readable($subdir_path)) {
                scan_dirs($subdir_path);
            }
        }
    }
}

// Parse options
foreach ($argv as $index => $arg) {
    // Skip the first iteration ($arg would be the name of this script)
    if ($index == 0) {
        continue;
    }

    switch ($arg) {
        case '--go':
            $do_it = true;
            break;
        default:
            if (preg_match('/^-+/', $arg)) {
                display_usage();
                exit(1);
            } elseif ($target_path || !is_dir($arg) || !is_readable($arg)) {
                echo "You must specify a single valid (existing and readable) directory path as argument.\n";
                exit(1);
            }
            $target_path = $arg;
            break;
    }
}

// Default value for target path
if (!$target_path) {
    $target_path = '.';
}

// Run
scan_dirs($target_path);
